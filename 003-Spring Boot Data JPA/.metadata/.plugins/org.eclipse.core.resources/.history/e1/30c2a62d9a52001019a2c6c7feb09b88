package com.app.arman.test;

import java.util.Arrays;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.boot.CommandLineRunner;
import org.springframework.boot.autoconfigure.data.web.SpringDataWebProperties.Sort;
import org.springframework.data.domain.ScrollPosition.Direction;
import org.springframework.stereotype.Component;

import com.app.arman.entity.Book;
import com.app.arman.repo.BookRepository;

import jakarta.persistence.criteria.Order;

@Component
public class TestOperations implements CommandLineRunner {

	@Autowired
	private BookRepository repo;
	
	public void run(String... args) throws Exception {
		//System.out.println(repo.getClass().getName());
		Book b1 = new Book(10, "Core Java", "SAM", 200.0);
		repo.save(b1);
		
		repo.save(new Book(11, "Adv Java", "SYED", 300.0));
		repo.save(new Book(12, "Spring", "SAM", 400.0)); //INSERT
		repo.save(new Book(12, "Spring 6.x", "SAM", 600.0)); //UPDATE
		
		
		repo.saveAll(
				Arrays.asList(
						new Book(13, "HTML CSS", "AJAY", 100.0),
						new Book(14, "Bootstrap", "AJAY", 200.0),
						new Book(15, "ReactJS", "AJAY", 300.0)
						)
				);
		
		
		Iterable<Book> data = repo.findAll();   // Iterable<T> =>?
		//data.forEach(System.out::println);    //Method reference=> to print data [use forEach()]
		data.forEach(b->System.out.println(b)); //lembda Expression=> to print data [use forEach()]
		
		System.out.println(repo.count());
		
		System.out.println(repo.existsById(13));
	//=========================================================================================
	

		//repo.findAll().forEach(System.out::println);
				//-------------------------------------------//
				//**  1. SINGLE COLUMN SORTING - ASC     **  //
				//-------------------------------------------//
				//order by bcost ASC;
				//Sort s1 = Sort.by(Direction.ASC, "bookCost");
				Sort s1 = Sort.by("bookCost");
				
				Iterable<Book> it1 = repo.findAll(s1);
				it1.forEach(System.out::println);
				
				//-------------------------------------------//
				//**  2. SINGLE COLUMN SORTING - DESC    **  //
				//-------------------------------------------//
				//order by bcost DESC;
				Sort s2 = Sort.by(Direction.DESC, "bookCost");
				repo.findAll(s2).forEach(System.out::println);
				
				//-----------------------------------------------------------------//
				//**  3. MULTI-COLUMN SORTING - SAM TYPE (Both ASC/Both DESC)  **  //
				//-----------------------------------------------------------------//
				//Sort s3 = Sort.by(Direction.ASC, "bookCost", "bookName");
				Sort s3 = Sort.by(Direction.DESC, "bookCost", "bookName");
				repo.findAll(s3).forEach(System.out::println);
				
				
				//-----------------------------------------------------------//
				//**  4. MULTI-COLUMN SORTING -MIXED TYPE ( ASC +  DESC) **  //
				//-----------------------------------------------------------//
				//1 order = 1 direction + 1 property
				Sort s4 = Sort.by(
							Order.asc("bookCost"),
							Order.desc("bookName")
						);
				repo.findAll(s4).forEach(System.out::println);

		
		
	}

}
